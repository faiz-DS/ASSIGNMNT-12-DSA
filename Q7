class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def insert_alternate_positions(first_head, second_head):
    if not first_head or not second_head:
        return first_head

    first_current = first_head
    second_current = second_head

    while first_current and second_current:
        first_next = first_current.next
        second_next = second_current.next

        # Insert second_current between first_current and first_next
        first_current.next = second_current
        second_current.next = first_next

        # Move both pointers to their respective next nodes
        first_current = first_next
        second_current = second_next

    # The second list will be empty after insertion
    # We can set the second_head to None
    second_head = None

    return first_head

def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" ")
        current = current.next
    print()

# Test example 1
first_head1 = ListNode(5, ListNode(7, ListNode(17, ListNode(13, ListNode(11)))))
second_head1 = ListNode(12, ListNode(10, ListNode(2, ListNode(4, ListNode(6)))))

print("Example 1 Input:")
print("First List:", end=" ")
print_linked_list(first_head1)
print("Second List:", end=" ")
print_linked_list(second_head1)

first_head1 = insert_alternate_positions(first_head1, second_head1)

print("Example 1 Output:")
print("First List:", end=" ")
print_linked_list(first_head1)
print("Second List:", end=" ")
print_linked_list(second_head1)

# Test example 2
first_head2 = ListNode(1, ListNode(2, ListNode(3)))
second_head2 = ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8)))))

print("Example 2 Input:")
print("First List:", end=" ")
print_linked_list(first_head2)
print("Second List:", end=" ")
print_linked_list(second_head2)

first_head2 = insert_alternate_positions(first_head2, second_head2)

print("Example 2 Output:")
print("First List:", end=" ")
print_linked_list(first_head2)
print("Second List:", end=" ")
print_linked_list(second_head2)
